<!DOCTYPE html>
<html>
  <head>
    <title>防災情報s-map</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_pack_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
    <header>
       <%= render "layouts/header" %>
    </header>

    <div class="container-fluid">
      <div class="row">
        <div class="col-4 mt-2">
          <input id="addressText">
          <input type="button" value="マップ検索" onclick="codeAddress()">
           <div class="mt-2"><%= yield %></div>
        </div>
        <div class="col-8">
          <div id='map'></div>
        </div>
      </div>
    </div>

    <style>
    #map {
      height: 540px;
    }
    </style>

    <script>//最初に表示するMapの設定
    function initMap(){          //関数initMapを定義
      mapInstance = new google.maps.Map(document.getElementById('map'), {      //変数mapInstance = newで空箱とし、id=mapのHTML要素を取得//google.maps.MapsはGoogleのメソッド
        center: {lat: 35.680, lng: 139.767},  //初期表示の場所（東京の緯度経度で設定）
        zoom: 12                              //初期表示の縮尺
      });


      var position = new google.maps.LatLng({     //変数position = 空箱として'lat''lng'に緯度経度を設定
        "lat": 35.680,
        "lng": 139.767, //投稿に緯度経度が保存できたら変更
      });
      var marker = [];   //変数markerを空の配列とする
      var info = [];     //変数infoを空の配列とする

       //下記each文をif文の条件下で表示させる。（サインインしている＆）カレントユーザーが存在している＆投稿詳細ページを表示するとき
       <% if signed_in? && current_user.present? && current_page?(user_posts_path(current_user)) %>
　　　　　　　　//each文のpostをJSの関数に入れる。
　　　　　　　　//let markerLatLang = newで緯度経度を入れる空のマーカーを作成
　　　　　　　　//let marker = newで実際にピンを立てる空のマーカーを設定
               <% @posts.each do |post| %>
                  (function() {
                  let markerLatLng = new google.maps.LatLng({lat: <%= post.latitude %>, lng: <%= post.longitude %>}); // 緯度経度のデータ作成
                  let marker = new google.maps.Marker({
                    position: markerLatLng,
                    map: mapInstance
                  });


                  //マーカーをクリックしたとき、詳細情報を表示
                  var infowindow = new google.maps.InfoWindow({
                  position: markerLatLng,
                  content: "<a href='https://78c88ab6be11477f91f178f82f9515a5.vfs.cloud9.ap-northeast-1.amazonaws.com/users/2/posts/" + <%= post.id %>  + "'" + "><%= post.place_name %></a>"
                }); //ここで詳細ページへのリンクを表示させる
                marker.addListener('click', function() {
                  infowindow.open(map, marker);
                });

                  })();
                <% end %>
                <% end %>


          }


       //検索した場所のマップ表示
      function codeAddress(){
        const geocoder = new google.maps.Geocoder()
        let inputAddress = document.getElementById('addressText').value;
        let aft;
        geocoder.geocode( { 'address': inputAddress}, function(results, status) {
          if (status == 'OK') {
              //マーカーが複数できないようにする
              if (aft == true){
                  marker.setMap(null);
              }

              //新しくマーカーを作成する
              mapInstance.setCenter(results[0].geometry.location);
                  marker = new google.maps.Marker({
                  map: mapInstance,
                  position: results[0].geometry.location,
                  draggable: true // ドラッグ可能にする
              });

              aft = true;

              //検索した時に緯度経度を入力する
              <% if signed_in? && current_user.present? && current_page?(new_user_post_path(current_user)) %>
                document.getElementById('lat').value = results[0].geometry.location.lat();
                document.getElementById('lng').value = results[0].geometry.location.lng();

                // マーカーのドロップ（ドラッグ終了）時のイベント
                google.maps.event.addListener( marker, 'dragend', function(ev){
                // イベントの引数evの、プロパティ.latLngが緯度経度
                  document.getElementById('lat').value = ev.latLng.lat();
                  document.getElementById('lng').value = ev.latLng.lng();
              });
              <% end %>
          } else {
            alert('該当する結果がありませんでした：' + status);
          }
        });
      }


  document.addEventListener("turbolinks:load", function() {
    let mapInstance;      //mapInstanceを変数宣言

    if(window.google){  //gmapの表示（APIの取得）
      if (!mapInstance)
        initMap();
    } else{

      $.ajax('https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLEMAPS_API_KEY"] %>&callback=initMap', {
          crossDomain: true,
          dataType: 'script'
      });
    }
  })
    </script>

  </body>
  <footer class="foot">
    <div>
      <a>© 2022 yuya-tanaka All rights reserved</a>
    </div>
  </footer>
</html>
